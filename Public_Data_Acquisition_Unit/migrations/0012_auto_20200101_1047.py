# Generated by Django 2.2.7 on 2020-01-01 10:47

import datetime
from django.db import migrations, models
import django.db.models.deletion
from django.utils.timezone import utc


class Migration(migrations.Migration):

    dependencies = [
        ('Public_Data_Acquisition_Unit', '0011_auto_20200101_0945'),
    ]

    operations = [
        migrations.AlterField(
            model_name='facebook_target_group',
            name='created_on',
            field=models.DateTimeField(default=datetime.datetime(2020, 1, 1, 10, 47, 13, 738328, tzinfo=utc)),
        ),
        migrations.AlterField(
            model_name='facebook_target_hashtag',
            name='created_on',
            field=models.DateTimeField(default=datetime.datetime(2020, 1, 1, 10, 47, 13, 738836, tzinfo=utc)),
        ),
        migrations.AlterField(
            model_name='facebook_target_page',
            name='created_on',
            field=models.DateTimeField(default=datetime.datetime(2020, 1, 1, 10, 47, 13, 737821, tzinfo=utc)),
        ),
        migrations.AlterField(
            model_name='facebook_target_person',
            name='created_on',
            field=models.DateTimeField(default=datetime.datetime(2020, 1, 1, 10, 47, 13, 737162, tzinfo=utc)),
        ),
        migrations.AlterField(
            model_name='facebook_target_search',
            name='created_on',
            field=models.DateTimeField(default=datetime.datetime(2020, 1, 1, 10, 47, 13, 739312, tzinfo=utc)),
        ),
        migrations.AlterField(
            model_name='instagram_target_person',
            name='created_on',
            field=models.DateTimeField(default=datetime.datetime(2020, 1, 1, 10, 47, 13, 741689, tzinfo=utc)),
        ),
        migrations.AlterField(
            model_name='instagram_target_search',
            name='created_on',
            field=models.DateTimeField(default=datetime.datetime(2020, 1, 1, 10, 47, 13, 742199, tzinfo=utc)),
        ),
        migrations.AlterField(
            model_name='news_site_target',
            name='created_on',
            field=models.DateTimeField(default=datetime.datetime(2020, 1, 1, 10, 47, 13, 741202, tzinfo=utc)),
        ),
        migrations.AlterField(
            model_name='twitter_target_hashtag',
            name='created_on',
            field=models.DateTimeField(default=datetime.datetime(2020, 1, 1, 10, 47, 13, 740294, tzinfo=utc)),
        ),
        migrations.AlterField(
            model_name='twitter_target_person',
            name='created_on',
            field=models.DateTimeField(default=datetime.datetime(2020, 1, 1, 10, 47, 13, 739840, tzinfo=utc)),
        ),
        migrations.AlterField(
            model_name='twitter_target_search',
            name='created_on',
            field=models.DateTimeField(default=datetime.datetime(2020, 1, 1, 10, 47, 13, 740757, tzinfo=utc)),
        ),
        migrations.CreateModel(
            name='Linkedin_Target_Person',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('author_id', models.CharField(max_length=100)),
                ('author_account', models.CharField(max_length=100)),
                ('author_name', models.CharField(max_length=100)),
                ('author_url', models.URLField()),
                ('expired_on', models.DurationField()),
                ('is_enabled', models.BooleanField(choices=[(True, 'Target is Enabled'), (False, 'Target is Disabled')], default=True)),
                ('is_expired', models.BooleanField(choices=[(True, 'Target is Expired'), (False, 'Target is Functional')], default=False)),
                ('need_screenshots', models.BooleanField(default=False)),
                ('periodic_interval', models.IntegerField(choices=[(0, 'on time only'), (5, 'once per 5 minutes '), (10, 'once per 10 minutes '), (15, 'once per 15 minutes '), (30, 'once per 30 minutes '), (40, 'once per 40 minutes '), (60, 'once per 60 minutes '), (90, 'once per 90 minutes '), (120, 'once per 120 minutes '), (180, 'once per 180 minutes '), (360, 'once per 360 minutes '), (720, 'once per 720 minutes ')], max_length=50)),
                ('created_on', models.DateTimeField(default=datetime.datetime(2020, 1, 1, 10, 47, 13, 742755, tzinfo=utc))),
                ('global_target_reff', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='Public_Data_Acquisition_Unit.Global_Target_Record')),
            ],
        ),
        migrations.CreateModel(
            name='Linkedin_Target_Company',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('author_id', models.CharField(max_length=100)),
                ('author_account', models.CharField(max_length=100)),
                ('author_name', models.CharField(max_length=100)),
                ('author_url', models.URLField()),
                ('expired_on', models.DurationField()),
                ('is_enabled', models.BooleanField(choices=[(True, 'Target is Enabled'), (False, 'Target is Disabled')], default=True)),
                ('is_expired', models.BooleanField(choices=[(True, 'Target is Expired'), (False, 'Target is Functional')], default=False)),
                ('need_screenshots', models.BooleanField(default=False)),
                ('periodic_interval', models.IntegerField(choices=[(0, 'on time only'), (5, 'once per 5 minutes '), (10, 'once per 10 minutes '), (15, 'once per 15 minutes '), (30, 'once per 30 minutes '), (40, 'once per 40 minutes '), (60, 'once per 60 minutes '), (90, 'once per 90 minutes '), (120, 'once per 120 minutes '), (180, 'once per 180 minutes '), (360, 'once per 360 minutes '), (720, 'once per 720 minutes ')], max_length=50)),
                ('created_on', models.DateTimeField(default=datetime.datetime(2020, 1, 1, 10, 47, 13, 743277, tzinfo=utc))),
                ('global_target_reff', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='Public_Data_Acquisition_Unit.Global_Target_Record')),
            ],
        ),
    ]
